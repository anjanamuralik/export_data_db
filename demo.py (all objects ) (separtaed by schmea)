import cx_Oracle
import logging
from datetime import datetime
import os
import time
import sys

class OracleMetadataExporter:
    def __init__(self, host: str, port: str, service_name: str, username: str, password: str):
        self.host = host
        self.port = port
        self.service_name = service_name
        self.username = username
        self.password = password
        self.output_dir = 'metadata_export'
        self.connection = None
        self.object_types = [
            'TABLE', 'INDEX', 'VIEW', 'PROCEDURE', 'FUNCTION', 'PACKAGE',
            'PACKAGE BODY', 'TRIGGER', 'SEQUENCE', 'SYNONYM', 'TYPE',
            'MATERIALIZED VIEW', 'DATABASE LINK'
        ]

    def connect(self):
        """Establish database connection as SYSDBA"""
        try:
            dsn = cx_Oracle.makedsn(
                self.host,
                self.port,
                service_name=self.service_name
            )
            self.connection = cx_Oracle.connect(
                user=self.username,
                password=self.password,
                dsn=dsn,
                mode=cx_Oracle.SYSDBA
            )
            print(f"Successfully connected to {self.service_name}")
            logging.info(f"Successfully connected to Oracle database {self.service_name}")
        except Exception as e:
            error_msg = f"Failed to connect to database: {str(e)}"
            print(error_msg)
            logging.error(error_msg)
            raise

    def setup_metadata_extraction(self):
        """Setup DBMS_METADATA parameters"""
        try:
            with self.connection.cursor() as cursor:
                cursor.execute("""
                    BEGIN
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'STORAGE', FALSE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'SEGMENT_ATTRIBUTES', FALSE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'SQLTERMINATOR', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'PRETTY', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'CONSTRAINTS', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'REF_CONSTRAINTS', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'CONSTRAINTS_AS_ALTER', TRUE);
                    END;
                """)
            print("Metadata extraction parameters set successfully")
        except Exception as e:
            error_msg = f"Failed to setup metadata extraction: {str(e)}"
            print(error_msg)
            logging.error(error_msg)
            raise

    def get_schemas(self):
        """Get list of all schemas in the database"""
        try:
            with self.connection.cursor() as cursor:
                cursor.execute("""
                    SELECT DISTINCT owner 
                    FROM all_objects 
                    WHERE owner IN (
                        'SYS', 'SYSTEM', 'APPS','APPLSYS')
                    ORDER BY owner
                """)
                return [row[0] for row in cursor]
        except Exception as e:
            error_msg = f"Error getting schemas: {str(e)}"
            print(error_msg)
            logging.error(error_msg)
            raise

    def export_metadata(self):
        """Main export function"""
        try:
            print("\nStarting metadata export...")
            self.connect()
            self.setup_metadata_extraction()
            
            # Create output directory with timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            self.output_dir = f"metadata_export_{timestamp}"
            if not os.path.exists(self.output_dir):
                os.makedirs(self.output_dir)
            print(f"Created output directory: {self.output_dir}")

            # Get all schemas
            schemas = self.get_schemas()
            print(f"\nFound {len(schemas)} schemas to process")

            # Process each schema
            for schema in schemas:
                print(f"\nProcessing schema: {schema}")
                self.export_schema_objects(schema)
            
            print(f"\nMetadata export completed successfully.")
            print(f"Output files are in: {os.path.abspath(self.output_dir)}")
            
        except KeyboardInterrupt:
            print("\nExport interrupted by user")
            logging.warning("Export interrupted by user")
        except Exception as e:
            print(f"\nError during export: {str(e)}")
            logging.error(f"Export failed: {str(e)}")
            raise
        finally:
            if self.connection:
                self.connection.close()
                print("Database connection closed")

    def export_schema_objects(self, schema: str):
        """Export all objects for a given schema"""
        schema_dir = os.path.join(self.output_dir, schema)
        if not os.path.exists(schema_dir):
            os.makedirs(schema_dir)

        # Write schema summary
        with open(os.path.join(schema_dir, '00_schema_info.txt'), 'w') as f:
            f.write(f"Schema Export Summary for {schema}\n")
            f.write(f"Generated: {datetime.now()}\n\n")
            
            # Get object counts
            with self.connection.cursor() as cursor:
                cursor.execute("""
                    SELECT object_type, COUNT(*) 
                    FROM all_objects 
                    WHERE owner = :schema 
                    GROUP BY object_type 
                    ORDER BY object_type
                """, schema=schema)
                
                f.write("Object Counts:\n")
                for obj_type, count in cursor:
                    f.write(f"{obj_type}: {count}\n")

        # Export each object type
        for obj_type in self.object_types:
            self.export_objects_by_type(schema, schema_dir, obj_type)

    def export_objects_by_type(self, schema: str, schema_dir: str, object_type: str):
        """Export all objects of a specific type for a schema"""
        try:
            # Create filename based on object type
            safe_type = object_type.replace(' ', '_').lower()
            output_file = os.path.join(schema_dir, f'{safe_type}s.sql')
            
            print(f"Exporting {object_type}s...")
            
            with self.connection.cursor() as cursor:
                # Get all objects of this type
                cursor.execute(f"""
                    SELECT object_name 
                    FROM all_objects 
                    WHERE owner = :schema 
                    AND object_type = :obj_type 
                    ORDER BY object_name
                """, schema=schema, obj_type=object_type)
                
                objects = cursor.fetchall()
                
                if not objects:
                    return
                
                with open(output_file, 'w') as f:
                    f.write(f"-- {object_type} definitions for schema {schema}\n")
                    f.write(f"-- Generated: {datetime.now()}\n\n")
                    
                    total_objects = len(objects)
                    for idx, (object_name,) in enumerate(objects, 1):
                        print(f"\rProcessing {object_type} {idx}/{total_objects}: {object_name}", end='', flush=True)
                        
                        try:
                            cursor.execute("""
                                SELECT DBMS_METADATA.GET_DDL(:obj_type, :obj_name, :schema)
                                FROM dual
                            """, obj_type=object_type, obj_name=object_name, schema=schema)
                            
                            ddl = cursor.fetchone()[0].read()
                            f.write(f"\n-- {object_type}: {object_name}\n")
                            f.write(f"{ddl}\n/\n\n")
                            
                            # For packages, also get package body if it exists
                            if object_type == 'PACKAGE':
                                try:
                                    cursor.execute("""
                                        SELECT DBMS_METADATA.GET_DDL('PACKAGE_BODY', :obj_name, :schema)
                                        FROM dual
                                    """, obj_name=object_name, schema=schema)
                                    
                                    body_ddl = cursor.fetchone()[0].read()
                                    f.write(f"\n-- Package Body: {object_name}\n")
                                    f.write(f"{body_ddl}\n/\n\n")
                                except Exception as e:
                                    f.write(f"\n-- No package body found for {object_name}\n\n")
                            
                        except Exception as e:
                            error_msg = f"Error getting DDL for {object_type} {object_name}: {str(e)}"
                            print(f"\n{error_msg}")
                            logging.error(error_msg)
                            f.write(f"\n-- Error getting DDL for {object_type} {object_name}\n\n")
                    
                    print(f"\nCompleted export of {total_objects} {object_type}s")
                    
        except Exception as e:
            error_msg = f"Error exporting {object_type}s for schema {schema}: {str(e)}"
            print(error_msg)
            logging.error(error_msg)

def main():
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        filename='metadata_export.log'
    )
    
    # Database connection parameters
    params = {
        'host': '192.168.1.50',
        'port': '1531',
        'service_name': 'TEST',
        'username': 'sys',
        'password': 'manager'
    }
    
    try:
        print("Starting Oracle metadata export...")
        exporter = OracleMetadataExporter(**params)
        exporter.export_metadata()
        print("\nExport completed successfully!")
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        logging.error(f"Export failed: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
