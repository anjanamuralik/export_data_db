import cx_Oracle
import logging
from datetime import datetime
import os
import time
import sys

class OracleMetadataExporter:
    def __init__(self, host: str, port: str, service_name: str, username: str, password: str):
        self.host = host
        self.port = port
        self.service_name = service_name
        self.username = username
        self.password = password
        self.schemas = ['SYSTEM']  # Add or modify schemas as needed
        self.output_dir = 'metadata_export'
        self.connection = None

    def connect(self):
        """Establish database connection as SYSDBA"""
        try:
            dsn = cx_Oracle.makedsn(
                self.host,
                self.port,
                service_name=self.service_name
            )
            self.connection = cx_Oracle.connect(
                user=self.username,
                password=self.password,
                dsn=dsn,
                mode=cx_Oracle.SYSDBA
            )
            print(f"Successfully connected to {self.service_name}")
            logging.info(f"Successfully connected to Oracle database {self.service_name}")
        except Exception as e:
            error_msg = f"Failed to connect to database: {str(e)}"
            print(error_msg)
            logging.error(error_msg)
            raise

    def setup_metadata_extraction(self):
        """Setup DBMS_METADATA parameters"""
        try:
            with self.connection.cursor() as cursor:
                cursor.execute("""
                    BEGIN
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'STORAGE', FALSE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'SEGMENT_ATTRIBUTES', FALSE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'SQLTERMINATOR', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'PRETTY', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'CONSTRAINTS', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'REF_CONSTRAINTS', TRUE);
                        DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM, 'CONSTRAINTS_AS_ALTER', TRUE);
                    END;
                """)
            print("Metadata extraction parameters set successfully")
        except Exception as e:
            error_msg = f"Failed to setup metadata extraction: {str(e)}"
            print(error_msg)
            logging.error(error_msg)
            raise

    def export_metadata(self):
        """Main export function"""
        try:
            print("\nStarting metadata export...")
            self.connect()
            self.setup_metadata_extraction()
            
            # Create output directory with timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            self.output_dir = f"metadata_export_{timestamp}"
            if not os.path.exists(self.output_dir):
                os.makedirs(self.output_dir)
            print(f"Created output directory: {self.output_dir}")

            # Export all object types for each schema
            for schema in self.schemas:
                print(f"\nProcessing schema: {schema}")
                self.export_schema_objects(schema)
            
            print(f"\nMetadata export completed successfully.")
            print(f"Output files are in: {os.path.abspath(self.output_dir)}")
            
        except KeyboardInterrupt:
            print("\nExport interrupted by user")
            logging.warning("Export interrupted by user")
        except Exception as e:
            print(f"\nError during export: {str(e)}")
            logging.error(f"Export failed: {str(e)}")
            raise
        finally:
            if self.connection:
                self.connection.close()
                print("Database connection closed")

    def export_schema_objects(self, schema: str):
        """Export all objects for a given schema"""
        try:
            # Create schema directory
            schema_dir = os.path.join(self.output_dir, schema)
            if not os.path.exists(schema_dir):
                os.makedirs(schema_dir)

            # Export different types of objects
            self.export_tables(schema, schema_dir)
            self.export_indexes(schema, schema_dir)
            self.export_views(schema, schema_dir)
            self.export_constraints(schema, schema_dir)
            self.export_sequences(schema, schema_dir)
            self.export_types(schema, schema_dir)
            
        except Exception as e:
            error_msg = f"Error exporting schema {schema}: {str(e)}"
            print(error_msg)
            logging.error(error_msg)

    def export_tables(self, schema: str, output_dir: str):
        """Export table definitions"""
        print(f"\nExporting tables for schema {schema}...")
        output_file = os.path.join(output_dir, 'tables.sql')
        
        try:
            with open(output_file, 'w') as f:
                with self.connection.cursor() as cursor:
                    cursor.execute("""
                        SELECT table_name
                        FROM all_tables
                        WHERE owner = :schema
                        ORDER BY table_name
                    """, schema=schema)
                    
                    tables = cursor.fetchall()
                    total_tables = len(tables)
                    print(f"Found {total_tables} tables")

                    f.write(f"-- Table definitions for schema {schema}\n")
                    f.write(f"-- Generated: {datetime.now()}\n\n")

                    for idx, (table_name,) in enumerate(tables, 1):
                        print(f"\rProcessing table {idx}/{total_tables}: {table_name}", end='', flush=True)
                        
                        try:
                            cursor.execute("""
                                SELECT DBMS_METADATA.GET_DDL('TABLE', :table_name, :schema)
                                FROM dual
                            """, table_name=table_name, schema=schema)
                            
                            ddl = cursor.fetchone()[0].read()
                            f.write(f"\n-- Table: {table_name}\n")
                            f.write(f"{ddl}\n/\n")
                            
                        except Exception as e:
                            error_msg = f"\nError getting DDL for table {table_name}: {str(e)}"
                            print(error_msg)
                            logging.error(error_msg)
                            f.write(f"\n-- Error getting DDL for table {table_name}\n")

                    print(f"\nCompleted table export for schema {schema}")

        except Exception as e:
            error_msg = f"Error exporting tables for schema {schema}: {str(e)}"
            print(error_msg)
            logging.error(error_msg)

    def export_views(self, schema: str, output_dir: str):
        """Export view definitions"""
        print(f"\nExporting views for schema {schema}...")
        output_file = os.path.join(output_dir, 'views.sql')
        
        try:
            with open(output_file, 'w') as f:
                with self.connection.cursor() as cursor:
                    cursor.execute("""
                        SELECT view_name
                        FROM all_views
                        WHERE owner = :schema
                        ORDER BY view_name
                    """, schema=schema)
                    
                    views = cursor.fetchall()
                    total_views = len(views)
                    print(f"Found {total_views} views")

                    f.write(f"-- View definitions for schema {schema}\n")
                    f.write(f"-- Generated: {datetime.now()}\n\n")

                    for idx, (view_name,) in enumerate(views, 1):
                        print(f"\rProcessing view {idx}/{total_views}: {view_name}", end='', flush=True)
                        
                        try:
                            cursor.execute("""
                                SELECT DBMS_METADATA.GET_DDL('VIEW', :view_name, :schema)
                                FROM dual
                            """, view_name=view_name, schema=schema)
                            
                            ddl = cursor.fetchone()[0].read()
                            f.write(f"\n-- View: {view_name}\n")
                            f.write(f"{ddl}\n/\n")
                            
                        except Exception as e:
                            error_msg = f"\nError getting DDL for view {view_name}: {str(e)}"
                            print(error_msg)
                            logging.error(error_msg)
                            f.write(f"\n-- Error getting DDL for view {view_name}\n")

                    print(f"\nCompleted view export for schema {schema}")

        except Exception as e:
            error_msg = f"Error exporting views for schema {schema}: {str(e)}"
            print(error_msg)
            logging.error(error_msg)

    def export_indexes(self, schema: str, output_dir: str):
        """Export index definitions"""
        print(f"\nExporting indexes for schema {schema}...")
        output_file = os.path.join(output_dir, 'indexes.sql')
        
        try:
            with open(output_file, 'w') as f:
                with self.connection.cursor() as cursor:
                    cursor.execute("""
                        SELECT index_name, table_name
                        FROM all_indexes
                        WHERE owner = :schema
                        ORDER BY table_name, index_name
                    """, schema=schema)
                    
                    indexes = cursor.fetchall()
                    total_indexes = len(indexes)
                    print(f"Found {total_indexes} indexes")

                    f.write(f"-- Index definitions for schema {schema}\n")
                    f.write(f"-- Generated: {datetime.now()}\n\n")

                    for idx, (index_name, table_name) in enumerate(indexes, 1):
                        print(f"\rProcessing index {idx}/{total_indexes}: {index_name}", end='', flush=True)
                        
                        try:
                            cursor.execute("""
                                SELECT DBMS_METADATA.GET_DDL('INDEX', :index_name, :schema)
                                FROM dual
                            """, index_name=index_name, schema=schema)
                            
                            ddl = cursor.fetchone()[0].read()
                            f.write(f"\n-- Index: {index_name} (Table: {table_name})\n")
                            f.write(f"{ddl}\n/\n")
                            
                        except Exception as e:
                            error_msg = f"\nError getting DDL for index {index_name}: {str(e)}"
                            print(error_msg)
                            logging.error(error_msg)
                            f.write(f"\n-- Error getting DDL for index {index_name}\n")

                    print(f"\nCompleted index export for schema {schema}")

        except Exception as e:
            error_msg = f"Error exporting indexes for schema {schema}: {str(e)}"
            print(error_msg)
            logging.error(error_msg)

def main():
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        filename='metadata_export.log'
    )
    
    # Database connection parameters
    params = {
        'host': '192.168.1.50',
        'port': '1531',
        'service_name': 'TEST',
        'username': 'sys',
        'password': 'manager'
    }
    
    try:
        print("Starting Oracle metadata export...")
        exporter = OracleMetadataExporter(**params)
        exporter.export_metadata()
        print("\nExport completed successfully!")
        
    except Exception as e:
        print(f"\nError: {str(e)}")
        logging.error(f"Export failed: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
